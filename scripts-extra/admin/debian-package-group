#!/bin/bash

# Manage predefined sets of software packages.

# Usage:
#
# install          $$PACKAGE_GROUPS  Install package group.
# remove           $$PACKAGE_GROUPS  Remove package group.
# remove-purge     $$PACKAGE_GROUPS  Remove package group and purge all config files.
# list-group-items $$PACKAGE_GROUPS  List all packages of a package group.
# list-groups                        List all package groups.
# stats                              Show statistics how many percent of a package group is installed.
# group-stats                        Show statistics how many percent of a package group is installed.


set -o errexit -o nounset -o pipefail
SCRIPT_FILENAME="$(readlink -f "${0}")"
SCRIPT_PATH="$(dirname "${SCRIPT_FILENAME}")"
DOTFILES_PATH="${SCRIPT_PATH}/../.."

source "${DOTFILES_PATH}/lib/bivalvia/help.sh"
source "${DOTFILES_PATH}/lib/bivalvia/list.sh"
source "${DOTFILES_PATH}/lib/bivalvia/numerical.sh"
source "${DOTFILES_PATH}/lib/bivalvia/package_management_deb.sh"
source "${DOTFILES_PATH}/lib/bivalvia/parse.sh"
source "${DOTFILES_PATH}/lib/bivalvia/script-su.sh"
source "${DOTFILES_PATH}/lib/bivalvia/string.sh"
source "${DOTFILES_PATH}/lib/bivalvia/require.sh"


INSTALLED_PACKAGE_LIST=""
SELECTED_PACKAGE_LIST=""

DEBIAN_PACKAGE_GROUP_PATH="${DOTFILES_PATH}/data/debian-package-groups/generic"


CMD_LINE_PARAMS="${@}"


function pre_requirements {
    return
    PACKAGE_LIST_EARLY_1="\
        git \
    "

    PACKAGE_LIST_EARLY_2="\
        eatmydata \
        etckeeper \
    "

    apt-get install ${PACKAGE_LIST_EARLY_1}

    git config --global user.email "root@localhost"
    git config --global user.name  "root"

    apt-get install ${PACKAGE_LIST_EARLY_2}
}


# Gets called by all commands that require at least one package group
# as additional parameter.
function require_package_group {
    local PACKAGE_GROUP_LIST="${*}"
    # echo "require_package_group parameter: $*"
    if [ ${#} -eq 0 ]; then
        invalid_parameter_exit "No package group given."
    fi
    # for PACKAGE_GROUP in "${PACKAGE_GROUP_LIST}"
}


# Convert the group name into the filename, that contains the package
# names.
function group_filename {
    local PACKAGE_GROUP=${1}
    local PACKAGE_GROUP_FILENAME=${DEBIAN_PACKAGE_GROUP_PATH}/${PACKAGE_GROUP}

    echo "${PACKAGE_GROUP_FILENAME}"
}


# List all packages in a package group.
function list_group_items {
    local PACKAGE_GROUP=${1}
    local PACKAGE_GROUP_FILENAME

    PACKAGE_GROUP_FILENAME="$(group_filename ${PACKAGE_GROUP})"
    require_file ${PACKAGE_GROUP_FILENAME}

    filter_active_bash_lines ${PACKAGE_GROUP_FILENAME}
}


# Prints the number of packages in a package group.
function package_group_package_list_size {
    local PACKAGE_GROUP="${1}"

    list_group_items | wc -l
}


function list_package_groups {
    find "${DEBIAN_PACKAGE_GROUP_PATH}" ! -type d | sed -e "s|.*/||g" | sort | uniq
}


# Prints "1" if package exists in distributions repository. "0"
# otherwise.
function package_exists {
    local PACKAGE_EXISTS=1

    # TODO: Not implemented.
    # dpkg -l "$1" &> /dev/null || PACKAGE_EXISTS=0

    echo ${PACKAGE_EXISTS}
}


# Add all packages of a package group to the global variable
# SELECTED_PACKAGE_LIST, which contains selected packages. This is
# necessary if the user wants to process an action on more than one
# package group.
function add_package_group_to_selected_package_list {
    local PACKAGE_GROUP=${1}
    local PACKAGE

    for PACKAGE in $(list_group_items ${PACKAGE_GROUP}); do
        if [ $(package_exists "${PACKAGE}") -eq 1 ]; then
            SELECTED_PACKAGE_LIST="${SELECTED_PACKAGE_LIST} ${PACKAGE}"
        else
            echo "Package not found: ${PACKAGE} (package group: ${PACKAGE_GROUP})."
            exit 1
        fi
    done
}


# Add all packages of all package groups given as parameter to a
# global variable SELECTED_PACKAGE_LIST. TODO: Do not use global
# variable.
function parse_all_package_groups {
    local PACKAGE_GROUP_LIST=${*}
    local PACKAGE_GROUP

    require_package_group "${PACKAGE_GROUP_LIST}"

    echo "Package group list: ${PACKAGE_GROUP_LIST}"
    for PACKAGE_GROUP in ${PACKAGE_GROUP_LIST}; do
        add_package_group_to_selected_package_list ${PACKAGE_GROUP}
    done
}


# Install all packages stored on the global variable
# SELECTED_PACKAGE_LIST. TODO: Do not use global variable.
function install_packages {
    apt-get install ${SELECTED_PACKAGE_LIST}
}


# Remove all packages stored on the global variable
# SELECTED_PACKAGE_LIST. TODO: Do not use global variable.
function remove_packages {
    apt-get remove ${SELECTED_PACKAGE_LIST}
}


# Remove all packages and its configuration files stored on the global
# variable SELECTED_PACKAGE_LIST. TODO: Do not use global variable.
function purge_packages {
    apt-get remove --purge ${SELECTED_PACKAGE_LIST}
}


function global_statistics {
    local PACKAGE_GROUP
    local PACKAGE


    for PACKAGE_GROUP in $(list_package_groups | sort); do
        package_group_statistics "${PACKAGE_GROUP}"
    done
}


# Returns a list with packages in a package group that are mot
# installed on the system.
function package_group_statistics {
    local PACKAGE_GROUP="${1}"
    local PACKAGE_IS_INSTALLED
    local PACKAGE_COUNT
    local INSTALLED_COUNT
    local NOT_INSTALLED_COUNT
    local NOT_INSTALLED_LIST
    local INSTALLED_PACKAGE_LIST
    local LONGEST_PACKAGE_GROUP_STR_LENGTH
    local STATS_HORIZONTAL_ALIGN

    INSTALLED_PACKAGE_LIST="$(installed_deb_packages_without_arch | sort)"

    INSTALLED_COUNT=0
    NOT_INSTALLED_COUNT=0
    NOT_INSTALLED_LIST=""

    LONGEST_PACKAGE_GROUP_STR_LENGTH=$(longest_string_length $(list_package_groups))
    (( STATS_HORIZONTAL_ALIGN = LONGEST_PACKAGE_GROUP_STR_LENGTH + 2 ))
    for PACKAGE in $(list_group_items ${PACKAGE_GROUP}); do
        PACKAGE_IS_INSTALLED=$(echo "${INSTALLED_PACKAGE_LIST}" | (grep -cFxe "${PACKAGE}" || true))
        if [ ${PACKAGE_IS_INSTALLED} -eq 1 ]; then
            (( INSTALLED_COUNT+=1 ))
            true
        else
            (( NOT_INSTALLED_COUNT+=1 ))
            NOT_INSTALLED_LIST="${NOT_INSTALLED_LIST} ${PACKAGE}"
        fi
    done
    (( PACKAGE_COUNT = INSTALLED_COUNT + NOT_INSTALLED_COUNT ))

    echo -n "$(fill_tail           ${STATS_HORIZONTAL_ALIGN} ' ' "${PACKAGE_GROUP}") "
    echo -n "$(fill_tail             5                       ' ' "${INSTALLED_COUNT}":"${NOT_INSTALLED_COUNT}"): "
    echo -n "$(fill_tail             5                       ' ' "$(fraction_to_percentage ${INSTALLED_COUNT} ${PACKAGE_COUNT})%") "
    echo    "$(fill_ellipsis_tail  180                       ' ' "${NOT_INSTALLED_LIST}")"
}


function main {
    if [ "${#}" -ge "1" ]; then
        local OPERATION=${1}
        local CMD_LINE_PARAMS="${*}"
        shift
        local PACKAGE_GROUPS

        case ${OPERATION} in
            install)
                run_as_root              "${CMD_LINE_PARAMS}"
                PACKAGE_GROUPS="${*}"
                pre_requirements
                parse_all_package_groups "${PACKAGE_GROUPS}"
                install_packages
                ;;
            remove)
                run_as_root              "${CMD_LINE_PARAMS}"
                PACKAGE_GROUPS="${*}"
                pre_requirements
                parse_all_package_groups "${PACKAGE_GROUPS}"
                remove_packages
                ;;
            remove-purge)
                run_as_root              "${CMD_LINE_PARAMS}"
                PACKAGE_GROUPS="${*}"
                pre_requirements
                parse_all_package_groups "${PACKAGE_GROUPS}"
                purge_packages
                ;;
            list-group-items)
                PACKAGE_GROUPS="${*}"
                require_package_group    "${PACKAGE_GROUPS}"
                list_group_items         "${PACKAGE_GROUPS}"
                ;;
            list-groups)
                list_package_groups
                ;;
            stats)
                global_statistics
                ;;
            group-stats)
                PACKAGE_GROUPS="${*}"
                require_package_group    "${PACKAGE_GROUPS}"
                package_group_statistics "${PACKAGE_GROUPS}"
                ;;
            *)
                echo "Unknown command. Abort!"
                exit 1
                ;;
        esac
    else
        invalid_parameter_exit
    fi

}


main "${@}"
