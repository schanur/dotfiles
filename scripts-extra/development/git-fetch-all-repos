#!/bin/bash

# Fetch all personal repositories in parallel.

# The effect is the same as using "git-each remote update". But it is
# a lot faster by using the "parallel" command.


set -o errexit -o nounset -o pipefail
SCRIPT_FILENAME="$(readlink -f "${0}")"
SCRIPT_PATH="$(dirname "${SCRIPT_FILENAME}")"
DOTFILES_PATH="${SCRIPT_PATH}/../.."

source "${DOTFILES_PATH}/lib/bivalvia/help.sh"
source "${DOTFILES_PATH}/lib/bivalvia/require.sh"
source "${DOTFILES_PATH}/lib/bivalvia/parallel.sh"


function git_fetch_repo_cmd {
    local GIT_REPO_PATH=${1}

    # echo "git remote update: ${GIT_REPO_PATH}"
    echo "(cd ${GIT_REPO_PATH} && git remote update)"
}


function git_fetch_all_repos {
    local GIT_REPO_PATH_LIST=${1}
    local GIT_REPO_PATH
    local GIT_FETCH_CMD_LIST=""
    local NEWLINE=$'\n'

    for GIT_REPO_PATH in ${GIT_REPO_PATH_LIST}; do
        GIT_FETCH_CMD_LIST="${GIT_FETCH_CMD_LIST}\"$(git_fetch_repo_cmd ${GIT_REPO_PATH})\"
"
    done
    # echo "${GIT_FETCH_CMD_LIST}" |parallel -j 8
    echo "${GIT_FETCH_CMD_LIST}" |parallel_exec
}


function main {
    local GIT_REPO_PATH_LIST="${1}"
    set_parallel_jobs 8
    git_fetch_all_repos "${GIT_REPO_PATH_LIST}"
}


GL_GIT_REPO_PATH_LIST=" $(git-list)"

main "${GL_GIT_REPO_PATH_LIST}"
