#!/bin/bash

# Switch external screen on/off based on current state.

# TODO:
# - Use config file instead of hard coded resolution and screen
# - Allow more than one external screen?
# - If no screen is found in config file, use the first one with the
#   maximum allowed screen resolution.
# - Add help.


set -o errexit -o nounset -o pipefail
SCRIPT_FILENAME="$(readlink -f "${0}")"
SCRIPT_PATH="$(dirname "${SCRIPT_FILENAME}")"
DOTFILES_PATH="${SCRIPT_PATH}/.."

source "${DOTFILES_PATH}/lib/bivalvia/help.sh"
source "${DOTFILES_PATH}/lib/bivalvia/debug.sh"


XRANDR_OUTPUT=""
DRY_RUN=0


function cache_xrandr_output {
    XRANDR_OUTPUT="$(xrandr)"
}


function primary_screen_name {
    echo "${XRANDR_OUTPUT}" | grep ' connected' | head -n 1 | cut -f 1 -d ' '
}


function secondary_screen_name {
    echo "${XRANDR_OUTPUT}" | grep ' connected' | tail -n 1 | cut -f 1 -d ' '
}


function highest_resolution_of_screen {
    local SCREEN_NAME="${1}"

    echo "${XRANDR_OUTPUT}" \
        | awk -v screen="${SCREEN_NAME}" '
BEGIN {
    a = 0
}
{
    if ($1 == screen) {
        a = 1
    } else {
        if (a == 1) {
            if ($1 ~ /[0-9]+x[0-9]+/) {
                print $1
            } else {
                a = a
            }
        }
    }
}
' \
        | sort -n \
        | tail -n 1
}


function connected_screens() {
    echo "${XRANDR_OUTPUT}" | grep -c ' connected'
}


function active_screens() {
    # echo "${XRANDR_OUTPUT}" | egrep -c "^   .*\*"
    echo "${XRANDR_OUTPUT}" | egrep -c "^.*connected\ .*[0-9]+x[0-9]+\+[0-9]+\+[0-9]"
}


function screen_on_max_resolution {
    local SCREEN_NAME="${1}"
    local NATIVE_RESOLUTION="$(highest_resolution_of_screen ${SCREEN_NAME})"

    CMD="\
xrandr --output  ${SCREEN_NAME}
       --mode    ${NATIVE_RESOLUTION}
       --left-of $(primary_screen_name)
"
    echo ${CMD}
    if [ ${DRY_RUN} -eq 0 ]; then
        ${CMD}
    fi
}


function screen_off {
    local SCREEN_NAME="${1}"

    CMD="\
xrandr --output ${SCREEN_NAME} --off
"
    echo ${CMD}
    ${CMD}
}


function screen_toggle {
    local ACTIVE_SCREEN_CNT=$(active_screens)
    #local PREFFERED_RESOLUTION=$(second_screen_preffered_resolution)

    case ${ACTIVE_SCREEN_CNT} in
        1)
            screen_on_max_resolution "$(secondary_screen_name)"
            ;;
        2)
            screen_off               "$(secondary_screen_name)"
            ;;
        *)
            echo "Wrong number of currently active screens: ${ACTIVE_SCREEN_CNT}"
            ;;
    esac
}


function debug {
    highest_resolution_of_screen "$(secondary_screen_name)"
    echo "
Primary screen name:                    $(primary_screen_name)
Secondary screen name:                  $(secondary_screen_name)
Secondary screen preferred resolutions: $(highest_resolution_of_screen $(secondary_screen_name))
Connected screens:                      $(connected_screens)
Active screens:                         $(active_screens)
"

    echo ""
}


function main {
    cache_xrandr_output

    if [ ${#} -eq 1 ]; then
        echo "test"
        case "${1}" in
            '-v'|'--verbose')
                debug
                ;;
            '-d'|'--dry-run')
                DRY_RUN=1
                ;;
            *)
                echo "Invalid parameter: ${1}"
                exit 1
                ;;
        esac
    fi

    screen_toggle
}


main "$@"
