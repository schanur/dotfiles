#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

SCRIPT_FILENAME=$(readlink -f $0)
SCRIPT_PATH=$(dirname $SCRIPT_FILENAME)
INCLUDE_PATH=${SCRIPT_PATH}/shared_bash

source ../config/github

GITHUB__USER_â†‘BASE_DOMAIN="https://github.com/${GITHUB__USERNAME}"

# function clone_repo_by_address() {
#     local REPO_ADDRESS=${1}
#     local REPO_ORIGIN_NAME=${2}

#     (cd local/dev && git clone --recursive --origin ${REPO_ORIGIN_NAME} ${REPO_ADDRESS})
# }

# function clone_repos() {
#     local REPO_LIST="${1}"
#     local REPO
#     for REPO in ${REPO_LIST}; do
#         echo ${REPO}
#     done
# }

function create_repo_path_structure() {
    mkdir -p ${GL_CONF__REPO_CLONE_BASE_PATH}
    mkdir -p ${GL_CONF__REPO_PUBLIC_PATH}
    mkdir -p ${GL_CONF__REPO_INACTIVE_PUBLIC_PATH}
    mkdir -p ${GL_CONF__REPO_PRIVATE_PATH}
}

# fnuction github_repo_name_to_repo_address() {

# }

# function github_repo_name_list_to_repo_address_list() {
#     local
#     for
# }

function main() {
    local REPO_NAME
    create_repo_path_structure

    # If repo does not exist in local dircetory, cline it.
    local GITHUB_REPO_LIST=$(${SCRIPT_PATH}/github_repos_from_user ${GITHUB__USERNAME})
    for REPO_NAME in GITHUB_REPO_LIST; do
        if [ ! -d ]; then
            (cd ${GL_CONF__REPO_CLONE_PATH} && git clone --recursive --origin github ${GITHUB__USER_BASE_DOMAIN}/${REPO_NAME}.git)
            # We expect all github repos as public. But we distinguish
            # between repos under active development and non continued
            # ones, which would only clutter the directory structure. If
            # the repo contains a file in its base directory, which marks
            # it as discontinued, make a link under
            # "inactive_public". Make a link in "public" otherwise
            if [ -f ${GL__DISCONTINUED_FILE_NAME} ];then
                ln -s -r ${GL_CONF__REPO_CLONE_PATH}/${REPO_NAME} ${GL_CONF__REPO_INACTIVE_PUBLIC_PATH}/${REPO_NAME}
            else
                ln -s -r ${GL_CONF__REPO_CLONE_PATH}/${REPO_NAME} ${GL_CONF__REPO_PUBLIC_PATH}/${REPO_NAME}
            fi
        fi
    done

    # Clone from fileserver if repo does not exist yet. If repo does
    # exist, add fileserver as remote to existing one.

    # clone_repos "${GITHUB_REPO_LIST}"
}

GL__DISCONTINUED_FILE_NAME="DISCONTINUED_REPOSITORY"
GL__GITHUB_CLONE_CMD_LIST=""

# Config
GL_CONF__REPO_BASE_PATH="~/local/dev"
GL_CONF__REPO_CLONE_PATH="${GL_REPO_BASE_PATH}/all"
GL_CONF__REPO_PUBLIC_PATH="${GL_REPO_BASE_PATH}/public"
GL_CONF__REPO_INACTIVE_PUBLIC_PATH="${GL_REPO_BASE_PATH}/inactive_public"
GL_CONF__REPO_PRIVATE_PATH="${GL_REPO_BASE_PATH}/private"

main
