#!/bin/bash

# Show changes not yet committed, commits not yet pushed, and some styleguide errors.

set -o errexit
set -o nounset
set -o pipefail


function print_repo_depth_indentation {
    local SUB_REPO_DEPTH=${1}
    local INDENT_STRING="  "
    local I

    for I in $(seq 1 ${SUB_REPO_DEPTH}); do
        echo -n "${INDENT_STRING}"
    done
}

function print_repo {
    local GIT_REPO_PATH=${1}
    local SUB_REPO_DEPTH=${2}

    print_repo_depth_indentation ${SUB_REPO_DEPTH}
    echo ${GIT_REPO_PATH}
}

function print_repo_if_conf_set {
    local GIT_REPO_PATH=${1}
    local SUB_REPO_DEPTH=${2}

    if [ "${GL_PRINT_PROCESSED_REPOS}" = "1" ]; then
        print_repo ${GIT_REPO_PATH} ${SUB_REPO_DEPTH}
    fi
}

function assert_git_repo {
    local GIT_REPO_PATH=${1}

    # "git status" returns 128 as exit code if path is not part of a
    # repository.
    # (cd ${GIT_REPO_PATH} && git status > dev/null)
}

function git_repo_has_uncommited_changes {
    local GIT_REPO_PATH=${1}
    local MODIFY_FILE_COUNT
    local HAS_UNCOMMITED_CHANGES=0

    MODIFY_FILE_COUNT="$(cd ${GIT_REPO_PATH} && git status -s |wc -l)"
    if [ ${MODIFY_FILE_COUNT} != "0" ]; then
        HAS_UNCOMMITED_CHANGES=1
    fi

    echo "${HAS_UNCOMMITED_CHANGES}"
}

function git_repo_has_commits_not_pushed {
    local GIT_REPO_PATH=${1}
    local HAS_COMMIT_NOT_PUSHED=0

    if [ $(cd ${GIT_REPO_PATH} && git --no-pager log --branches --not --remotes --oneline |wc -l) != "0" ]; then
        HAS_COMMIT_NOT_PUSHED=1
    fi

    echo ${HAS_COMMIT_NOT_PUSHED}
}

function git_repo_has_notable_changes {
    local GIT_REPO_PATH=${1}
    local HAS_NOTABLE_CHANGES

    HAS_NOTABLE_CHANGES=$(git_repo_has_uncommited_changes ${GIT_REPO_PATH})
    if [ ${HAS_NOTABLE_CHANGES} = "0" ]; then
        HAS_NOTABLE_CHANGES=$(git_repo_has_commits_not_pushed ${GIT_REPO_PATH})
    fi
    echo ${HAS_NOTABLE_CHANGES}
}

function git_status {
    local GIT_REPO_PATH=${1}

    (cd ${GIT_REPO_PATH} && git status -s)
    (cd ${GIT_REPO_PATH} && git --no-pager log --branches --not --remotes --oneline)
}

function warn_if_license_file_missing {
    local GIT_REPO_PATH=${1}
    if [ ! -f ${GIT_REPO_PATH}/LICENSE.md ]; then
        echo "No license file for repository: ${GIT_REPO_PATH}"
    fi
}

function print_changed_files_in_repo_path {
    local GIT_REPO_PATH=${1}
    local SUB_REPO_DEPTH=${2}

    if [[ $(git_repo_has_notable_changes ${GIT_REPO_PATH}) = "1" ]]; then
        print_repo ${GIT_REPO_PATH} ${SUB_REPO_DEPTH}
        git_status ${GIT_REPO_PATH}
    else
        print_repo_if_conf_set ${GIT_REPO_PATH} ${SUB_REPO_DEPTH}
        true
    fi
    warn_if_license_file_missing ${GIT_REPO_PATH}
}

# Call "print_changed_files_in_repo_path()" for path itself and all
# submodules.
function print_changed_files_in_repo_path_recursive {
    local GIT_REPO_PATH=${1}
    local RELATIVE_GIT_SUB_REPO_PATH
    local GITMODULE_FILENAME="${GIT_REPO_PATH}/.gitmodules"
    local SUB_REPOS_PROCESSED=0

    print_changed_files_in_repo_path ${GIT_REPO_PATH} 0
    # Check all submodules.
    if [ -f ${GITMODULE_FILENAME} ]; then
        for RELATIVE_GIT_SUB_REPO_PATH in $(cat ${GITMODULE_FILENAME} |grep "path = " |sed -e 's/.* = //g'); do
            print_changed_files_in_repo_path ${GIT_REPO_PATH}/${RELATIVE_GIT_SUB_REPO_PATH} 1
        done
    fi
}

function print_changed_files_for_repo_list() {
    local GIT_REPO_PATH_LIST=${1}
    local GIT_REPO_PATH

    for GIT_REPO_PATH in ${GIT_REPO_PATH_LIST}; do
        print_changed_files_in_repo_path_recursive ${GIT_REPO_PATH}
    done
}

function main {
    local GIT_REPO_PATH_LIST="${1}"
    print_changed_files_for_repo_list "${GIT_REPO_PATH_LIST}"
}

GL_PRINT_PROCESSED_REPOS=0

GL_GIT_REPO_PATH_LIST=" $(find ~/local/dev/all -maxdepth 1 -mindepth 1 -type d)"

# GL_GIT_REPO_PATH_LIST="
# $(find ~/local/dev/apt-source         -maxdepth 1 -mindepth 1 -type d)
# $(find ~/local/dev/employment         -maxdepth 2 -mindepth 2 -type d)
# $(find ~/local/dev/inactive_public    -maxdepth 1 -mindepth 1 -type d)
# $(find ~/local/dev/private            -maxdepth 1 -mindepth 1 -type d)
# $(find ~/local/dev/public             -maxdepth 1 -mindepth 1 -type d)
# "

main "${GL_GIT_REPO_PATH_LIST}"
