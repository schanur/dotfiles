#!/bin/bash

# Backup sync: Use rsync with default options for backups. Works local or over SSH

# Test

# We use the following rsync options:
# -a,     --archive               archive mode; equals -rlptgoD (no -H,-A,-X)
# -X,     --xattrs                preserve extended attributes
# -E,     --executability         preserve executability
# -S,     --sparse                handle sparse files efficiently
# -x,     --one-file-system       don't cross filesystem boundaries
#         --partial               keep partially transferred files
#
# If you want to use the script for machine local rsync operations,
# remove the "-e ssh" option.
# -e ssh, --rsh=ssh               specify the remote shell to use (we use SSH)
# -z,     --compress              compress file data during the transfer
#
#
# The following options may be inappropriate for your use cases:
#
# The "-x" option is a good way to backup a system even if removable
# drives, network filesystems, etc. are mounted in the directory you
# want to backup.
#


set -o errexit -o nounset -o pipefail
SCRIPT_FILENAME="$(readlink -f "${0}")"
SCRIPT_PATH="$(dirname "${SCRIPT_FILENAME}")"
DOTFILES_PATH="${SCRIPT_PATH}/.."

source "${DOTFILES_PATH}/lib/bivalvia/help.sh"


USE_SSH=0


function rsync_cmd_ssh {
    local PARAMS=${*}

    rsync -aXESxze "ssh -T -o Compression=yes" --partial ${PARAMS}
    exit $?
}


function rsync_cmd_local {
    local PARAMS=${*}

    rsync -aXESx --partial ${PARAMS}
    exit $?
}


function main {
    local USE_SSH=0

    if [ "${#}" -ge "3" ]; then
        if [ "${1}" = "-s" ]; then
            USE_SSH=1
            shift
        fi
    fi
    if [ "${#}" -ge "2" ]; then
        if [ "${USE_SSH}" -eq 1 ]; then
            rsync_cmd_ssh   "${@}"
        else
            rsync_cmd_local "${@}"
        fi
        EXIT_STATUS=$?
        exit ${EXIT_STATUS}
    else
        invalid_parameter_exit
    fi
}


main "${@}"
